# -*- coding: utf-8 -*-
"""Flower Image Classifications.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mbgECMPgosl0oqqk8Qpwvgn0ayDaf3Cb

# **CNN : Classifying Flower Images Using Transfer Learning with MobileNetV2 Architecture**

Project Created by : **Maulana Zulfikar Aziz**

E-mail : maulanazulfikarrz@gmail.com

## **Project Overview**

Bunga merupakan salah satu bagian dari tanaman yang berupa modifikasi suatu tunas (batang dan daun) dimana bentuk, warna, dan susunannya disesuaikan dengan kepentingan tumbuhan, salah satu fungsinya yaitu sebagai tempat terjadinya peristiwa penyerbukan dan pembuahan yang nantinya akan menghasilkan buah [1].

Saat kita berada di lingkungan yang penuh dengan pepohonan dan tanaman, seringkali kita melihat suatu bunga akan tetapi kita tidak mengetahui nama dari bunga tersebut. Salah satu cara untuk menyelesaikan permasalahan ini adalah dengan membuat suatu model Machine Learning yang bisa digunakan untuk mengklasifikasikan nama bunga berdasarkan bentuknya yang nantinya bisa di-deploy ke dalam suatu device.

Dalam project ini, saya menggunakan metode Transfer Learning dengan arsitektur MobileNetV2 untuk menyelesaikan permasalahan klasifikasi 14 jenis bunga.

## **Project Understanding**

### Problem Statement (Pernyataan Masalah)

Kadangkala saat kita berjalan di taman atau lingkungan yang penuh dengan tanaman, kita penasaran dengan nama bunga dari suatu tanaman yang ada di lingkungan tersebut. Lalu, bagaimana cara untuk mengetahui nama bunga tersebut berdasarkan bentuknya?

### Goals (Tujuan)

Membuat sebuah model Convolutional Neural Network dengan metode Transfer Learning menggunakan arsitektur MobileNetV2 untuk menyelesaikan permasalahan klasifikasi 14 jenis bunga.

### Solution Approaches

Untuk membuat sebuah model Convolutional Neural Network dengan bantuan metode Transfer Learning menggunakan arsitektur MobileNetV2, kita perlu melakukan beberapa tahapan, yaitu :    

1. Data Understanding

   Tahapan ini mencakup penjelasan awal tentang data, data loading, data exploration, dan data visualization

2. Data Preparation

   Sebelum melalui tahap pemodelan, data perlu disiapkan terlebih dahulu. Persiapan yang perlu dilakukan adalah normalisasi nilai pixel pada gambar agar berada di rentang 0 sampai 1.

3. Modelling & Result

   Pada tahap ini, kita membuat sebuah model CNN dengan metode Transfer Learning menggunakan arsitektur MobileNetV2 lalu kita fit dengan menggunakan data train yang telah kita prepare sebelumnya.

4. Evaluation

   Model dievaluasi dengan menggunakan data test untuk mengetahui performa model jika diterapkan terhadap data yang belum pernah dilihat oleh model.

5. Save the Model

   Model yang telah dibuat, disimpan dengan format TF-Lite agar nantinya bisa digunakan untuk proses deployment ke mobile device.

## **Data Understanding**

### About Data

Data yang digunakan pada project ini merupakan data kumpulan 14 jenis gambar bunga yang dapat diunduh di : https://www.kaggle.com/datasets/amananandrai/ag-news-classification-dataset

Data ini mencakup 2 folder, yaitu `train` dan `val`. Total gambar yang dapat digunakan untuk proses training adalah 13618 buah gambar dengan total gambar validasi sebesar 98 buah gambar.

Adapun jenis-jenis bunga dalam data ini mencakup : carnation, iris, bluebells, golden english, roses, fallen nephews, tulips, marigolds, dandelions, chrysanthemums, black-eyed daisies, water lilies, sunflowers, dan daisies.

### Import Libraries
"""

import zipfile, os
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from PIL import Image
import random
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Dropout, MaxPooling2D, Conv2D
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau
import tensorflow as tf
import pathlib

"""### Data Loading

Untuk mempermudah eksekusi di device lain, data telah diupload terlebih dahulu di Google Drive, dan akan diupload dalam notebook ini melalui link Google Drive.
"""

!pip install --upgrade --no-cache-dir gdown

! gdown --id 1hblAwCfA9VWPr4VMj-tlOLvXdau8Lrrf

# Unzip dataset
files = "Flower_Classification.zip"
zip_ref = zipfile.ZipFile(files,'r')
zip_ref.extractall('dataset/')
zip_ref.close()

"""### Data Exploration"""

# Melihat jumlah kelas dalam data train
contents = os.listdir("dataset/train")
contents = [item for item in contents if os.path.isdir(os.path.join("dataset/train", item))]
print("Jumlah kelas : ",len(contents))
contents

# Melihat total gambar pada data train
total = 0
for label in os.listdir('dataset/train') :
  if not label.endswith(".txt") :
    jumlah = len(os.listdir(f"dataset/train/{label}"))
    total += jumlah
    print("Total gambar {} = {}".format(label,jumlah))
print("\n")
print("Total gambar train keseluruhan = {}".format(total))

# Melihat total gambar pada data validation
total = 0
for label in os.listdir('dataset/val') :
  if not label.endswith(".txt") :
    jumlah = len(os.listdir(f"dataset/val/{label}"))
    total += jumlah
    print("Total gambar {} = {}".format(label,jumlah))
print("\n")
print("Total gambar validation keseluruhan = {}".format(total))

"""### Data Visualization"""

# Melihat dimensi gambar
list_img = os.listdir('dataset/train/dandelion')
img_dir = random.choice(list_img)
img = image.load_img("dataset/train/dandelion/{}".format(img_dir))
img_dim = Image.open("dataset/train/sunflower/3779833278_de4aebebcb_c.jpg")
print("Dimensi Gambar = ",img_dim.size)
imgs = plt.imshow(img)

# Melihat bentuk gambar
plt.figure(figsize=(12, 4))

for i in range(1,10) :
  plt.subplot(3,3,i)
  flower_type = random.choice(contents)
  img_dir = random.choice(os.listdir("dataset/train/{}/".format(flower_type)))
  img = mpimg.imread("dataset/train/{}/{}".format(flower_type,img_dir))
  plt.imshow(img)
  plt.axis('off')

plt.show()

"""Terlihat bahwa gambar-gambar pada direktori train memiliki resolusi dan sudut pemotretan yang berbeda-beda. Oleh karena itu, pada tahap **Data Preparation** tidak akan dilakukan proses data augmentation dengan mengubah-ubah bentuk dari gambar.

## **Data Preparation**
"""

# Membuat data generator
train_gen = ImageDataGenerator(
    rescale=1./255,

)

val_gen = ImageDataGenerator(
rescale=1./255,
)

# Data Preprocessing

train_dir = "dataset/train"
val_dir = "dataset/val"

train_generator = train_gen.flow_from_directory(
    train_dir,
    target_size=(224,224), # Menyesuaikan MobileNetV2
    batch_size=32,
    class_mode="categorical"
)

validation_generator = val_gen.flow_from_directory(
val_dir,
    target_size=(224,224),
    batch_size=32,
    class_mode="categorical"
)

"""## **Modelling**

MobileNetV2 merupakan salah satu arsitektur CNN yang memiliki performa baik di mobile device. MobileNetV2 berbasis pada struktur residual terbalik dimana koneksi residual berada di antara lapisan-lapisan bottleneck. Lapisan ekspansi intermediate menggunakan konvolusi depthwise ringan untuk menyaring fitur sebagai sumber non-linieritas. Secara keseluruhan, arsitektur MobileNetV2 berisi lapisan initial fully convolutional layer dengan 32 filter, diikuti oleh 19 lapisan bottleneck residual. [2]
"""

# Membuat arsitektur model CNN dengan metode Transfer Learning menggunakan MobileNetV2

base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
for layer in base_model.layers:
    layer.trainable = False

model = Sequential([
base_model,
    GlobalAveragePooling2D(),
    BatchNormalization(),
    Dropout(0.5),
    Dense(512,activation="relu"),
    Dropout(0.2),
    Dense(256,activation="relu"),
    Dropout(0.3),
    Dense(14,activation="softmax")
]
)

# Melihat summary dari model
model.summary()

# Mendefinisikan Callbacks

checkpoint = ModelCheckpoint(
    "best_model.h5",
    monitor="val_loss",
    save_best_only=True,
    mode="min",
    verbose=1
)


early_stopping = EarlyStopping(
    monitor="val_loss",
    patience=6,
    restore_best_weights=True,
    verbose=1
)

reduce_lr = ReduceLROnPlateau(
    monitor="val_loss",
    factor=0.2,
    patience=3,
    min_delta=0.0001,
    mode="min",
    verbose=1
)

# Compile model
model.compile(
    loss="categorical_crossentropy",
    optimizer = "adam",
    metrics=["accuracy"]
)

# Train model

history = model.fit(
    train_generator,
    epochs=100,
    steps_per_epoch = len(train_generator),
    validation_data = validation_generator,
    validation_steps = len(validation_generator),
    callbacks = [checkpoint, early_stopping,reduce_lr],
    verbose=2
)

"""Diperoleh model terbaik berada pada Epoch 12,

Epoch 12: val_loss improved from 0.22547 to 0.21436, saving model to best_model.h5
427/427 - 25s - loss: 0.3195 - accuracy: 0.9002 - val_loss: 0.2144 - val_accuracy: 0.9388 - lr: 0.0010 - 25s/epoch - 60ms/step

## **Evaluation**
"""

# Melihat loss dan accuracy dari model

loss, acc = model.evaluate(validation_generator)
print("Model Loss:",loss)
print("Model Accuracy:",acc)

# Plot akurasi model
plt.plot(history.history["accuracy"])
plt.plot(history.history["val_accuracy"])
plt.title("Akurasi Model Tiap Epoch")
plt.xlabel("Epochs")
plt.ylabel("Akurasi")
plt.legend(["train_data","val_data"],loc="lower right")

# Plot loss model
plt.plot(history.history["loss"])
plt.plot(history.history["val_loss"])
plt.title("Loss Model Tiap Epoch")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend(["train_data","val_data"],loc="upper right")

"""## **Save the Model**"""

model_dir = "tflite_model/"
tf.saved_model.save(model,model_dir)

converter = tf.lite.TFLiteConverter.from_saved_model(model_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path("flower.tflite")
tflite_model_file.write_bytes(tflite_model)

# Melihat ukuran model

tflite_size = len(tflite_model) / (1024 * 1024)
print('TFLite model size = %d MBs.' % tflite_size)

"""## **Conclusion**

Model yang telah dibuat menggunakan metode Transfer Learning dengan arsitektur MobileNetV2 menghasilkan akurasi pada data train sebesar 90.02% dan akurasi pada data validasi sebesar 93.88%. Akurasi yang lebih besar mungkin bisa didapatkan dengan menggunakan arsitektur yang lain atau dengan proses hyperparameter tuning pada arsitektur MobileNetV2. Model ini dapat digunakan untuk mengklasifikan 14 jenis bunga dan dengan disimpan ke dalam format TF-Lite, model dapat di-deploy ke dalam mobile device.

## **Daftar Referensi**

[1] 	E. Palupi, Syafrizal and N. Hariani, "Studi Morfologi Polen Tanaman Pekarangan di Perumahan Gn. Dubbs Balikpapan," Bioprospek, pp. 16-21, 2018.

[2] 	A. G. Howard et al., “MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications.” arXiv, 2017. doi: 10.48550/ARXIV.1704.04861.
"""